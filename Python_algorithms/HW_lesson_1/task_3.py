"""
Задание 3.
Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

airlines = {
    'QatarAirways': 45000000,
    'FlyEmirates': 65000000,
    'VirginAtlantic': 50000000,
    'AirNewZealand': 99000000,
    'SingaporeAirlines': 80000000
}


# Вариант №1 (Сложность: O(n log n))
def way_one(my_dict: dict):
    top_3_company = []                 # O(1)
    for i in my_dict.values():         # O(n)
        top_3_company.append(i)        # O(1)
    return sorted(top_3_company)[2:]   # O(n log n)


# Вариант №2 (Сложность: O(n))
def way_two(my_dict: dict):
    top_3_company = list(my_dict.values())
    return sorted(top_3_company)[2:]


print(way_one(airlines))
print(way_two(airlines))

'''
Вывод: Наглядно видно, что чем проще код, меньше циклов и тем более вложенных в них циклов
(это хорошо продемонстрировано в предыдущих заданиях),
код работает гораздо быстрее. Согласно графику функций необходимо стремиться к
O(log n) и избегать O(n!) и O(2^n).
'''
