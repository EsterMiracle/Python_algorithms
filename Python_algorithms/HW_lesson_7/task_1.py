"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в
виде функции.
Обязательно доработайте алгоритм (сделайте его умнее)!
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""

import random
from timeit import timeit

numbs = [random.randint(-100, 100) for _ in range(1000)]


# функция сортирующая методом "пузырька":
def bubble_sort(lst_obj):
    i = 1
    while i < len(lst_obj):
        for j in range(len(lst_obj) - i):
            if lst_obj[j] > lst_obj[j + 1]:
                lst_obj[j], lst_obj[j + 1] = lst_obj[j + 1], lst_obj[j]
        i += 1
    return lst_obj


# улучшим метод "пузырька" путём добавления проверки на повторение чисел в списке.
def upgrade_bubble_sort(lst_obj):
    i = 0
    while i < len(lst_obj):
        sort = True
        for j in range(len(lst_obj) - 1, i, -1):
            if lst_obj[j] > lst_obj[j - 1]:
                lst_obj[j], lst_obj[j - 1] = lst_obj[j - 1], lst_obj[j]
                sort = False
        i += 1
        if sort:
            break
    return lst_obj


print('Время выполнения методом "пузырька":', timeit('bubble_sort(numbs[:])', globals=globals(), number=100))
print('Время выполнения с модификацией "пузырька":', timeit('upgrade_bubble_sort(numbs[:])', globals=globals(), number=100))

'''
Моя модификация заключалась в сортировке по убыванию, 
и в завершении цикла в случае отсутствия замены чисел в списке за проход. Исходя из замеров, 
мы видим что модификация дала незначительное уменьшение по времени, это из-за того что
вероятность получить сразу отсортированный массив практически равна нулю.
'''
